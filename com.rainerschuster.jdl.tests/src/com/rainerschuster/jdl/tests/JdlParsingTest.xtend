/*
 * generated by Xtext 2.10.0
 */
package com.rainerschuster.jdl.tests

import com.google.inject.Inject
import com.rainerschuster.jdl.jdl.Model
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(JdlInjectorProvider)
class JdlParsingTest{

	@Inject
	ParseHelper<Model> parseHelper

	@Test 
	def void test01() {
		val result = parseHelper.parse('''
			entity A
			entity B
			entity C {}
			entity D {
			  name String required,
			  address String required maxlength(100),
			  age Integer required min(18)
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test02() {
		val result = parseHelper.parse('''
			entity Book
			entity Author
			
			relationship OneToMany {
			  Author{book} to Book{writer(name)}
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test03() {
		val result = parseHelper.parse('''
			entity A
			entity B
			entity C
			entity D
			
			relationship OneToOne {
			  A{b} to B{a},
			  B{c} to C
			}
			relationship ManyToMany {
			  A{d} to D{a},
			  C{d} to D{c}
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test04() {
		val result = parseHelper.parse('''
			entity A {
			  name String required
			}
			entity B
			
			
			relationship OneToOne {
			  A{b} to B{a(name)}
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test05() {
		val result = parseHelper.parse('''
			enum Language {
			  FRENCH, ENGLISH, SPANISH
			}
			
			
			entity Book {
			  title String required,
			  description String,
			  language Language
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test06() {
		val result = parseHelper.parse('''
			entity A {
			  name String required
			}
			
			entity B {}
			
			entity C {}
			
			dto A, B with mapstruct
			
			paginate A, C with infinite-scroll
			paginate B with pager
			
			service A with serviceClass
			service C with serviceImpl
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test07() {
		val result = parseHelper.parse('''
			entity A {}
			entity B {}
			entity C {}
			
			// no service for A
			service B with serviceClass
			service C with serviceImpl
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test08() {
		val result = parseHelper.parse('''
			entity A
			entity B
			entity C
			// ...
			entity Z
			
			dto * with mapstruct
			service all with serviceImpl
			paginate C, with pager
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test09() {
		val result = parseHelper.parse('''
			entity A
			entity B
			entity C
			// ...
			entity Z
			
			dto * with mapstruct except A
			service all with serviceImpl except A, B, C
			paginate C, with pager
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test10() {
		val result = parseHelper.parse('''
			entity A
			entity B
			entity C
			
			skipClient for A
			skipServer for B
			angularSuffix * with mySuperEntities
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test11() {
		val result = parseHelper.parse('''
			entity A // A is the table's name here
			entity B (the_best_entity) // the_best_entity is the table's name
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test12() {
		val result = parseHelper.parse('''
			entity A
			entity B
			entity C
			
			microservice * with mysuperjhipsterapp except C
			microservice C with myotherjhipsterapp
			search * with ElasticSearch except C
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test13() {
		val result = parseHelper.parse('''
			/**
			 * Class comments.
			 * @author The JHipster team.
			 */
			entity MyEntity { // another form of comment
			  /** A required attribute */
			  myField String required,
			  mySecondField String // another form of comment
			}
			
			/**
			 * Second entity.
			 */
			entity MySecondEntity {}
			
			relationship OneToMany {
			  /** This is possible too! */
			  MyEntity{mySecondEntity}
			  to
			  /**
			   * And this too!
			   */
			  MySecondEntity{myEntity}
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test14() {
		val result = parseHelper.parse('''
			entity Driver {}
			entity Car {}
			relationship OneToOne {
			  Car{driver} to Driver{car}
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test15() {
		val result = parseHelper.parse('''
			entity Citizen {}
			entity Passport {}
			relationship OneToOne {
			  Citizen{passport} to Passport
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test16() {
		val result = parseHelper.parse('''
			entity Owner {}
			entity Car {}
			relationship OneToMany {
			  Owner{car} to Car{owner}
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test17() {
		val result = parseHelper.parse('''
			entity Owner {}
			entity Car {}
			relationship OneToMany {
			  Owner{car} to Car
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test18() {
		val result = parseHelper.parse('''
			entity Owner {}
			entity Car {}
			relationship ManyToOne {
			  Car{owner} to Owner
			}
		''')
		Assert.assertNotNull(result)
	}

	@Test 
	def void test19() {
		val result = parseHelper.parse('''
			entity Driver {}
			entity Car {}
			relationship ManyToMany {
			  Car{driver} to Driver{car}
			}
		''')
		Assert.assertNotNull(result)
	}

}
